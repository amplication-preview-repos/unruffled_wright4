/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IngredientService } from "../ingredient.service";
import { IngredientCreateInput } from "./IngredientCreateInput";
import { Ingredient } from "./Ingredient";
import { IngredientFindManyArgs } from "./IngredientFindManyArgs";
import { IngredientWhereUniqueInput } from "./IngredientWhereUniqueInput";
import { IngredientUpdateInput } from "./IngredientUpdateInput";
import { RecipeFindManyArgs } from "../../recipe/base/RecipeFindManyArgs";
import { Recipe } from "../../recipe/base/Recipe";
import { RecipeWhereUniqueInput } from "../../recipe/base/RecipeWhereUniqueInput";

export class IngredientControllerBase {
  constructor(protected readonly service: IngredientService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ingredient })
  async createIngredient(
    @common.Body() data: IngredientCreateInput
  ): Promise<Ingredient> {
    return await this.service.createIngredient({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        unit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ingredient] })
  @ApiNestedQuery(IngredientFindManyArgs)
  async ingredients(@common.Req() request: Request): Promise<Ingredient[]> {
    const args = plainToClass(IngredientFindManyArgs, request.query);
    return this.service.ingredients({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        unit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ingredient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ingredient(
    @common.Param() params: IngredientWhereUniqueInput
  ): Promise<Ingredient | null> {
    const result = await this.service.ingredient({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        unit: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ingredient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIngredient(
    @common.Param() params: IngredientWhereUniqueInput,
    @common.Body() data: IngredientUpdateInput
  ): Promise<Ingredient | null> {
    try {
      return await this.service.updateIngredient({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          quantity: true,
          unit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ingredient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIngredient(
    @common.Param() params: IngredientWhereUniqueInput
  ): Promise<Ingredient | null> {
    try {
      return await this.service.deleteIngredient({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          quantity: true,
          unit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recipes")
  @ApiNestedQuery(RecipeFindManyArgs)
  async findRecipes(
    @common.Req() request: Request,
    @common.Param() params: IngredientWhereUniqueInput
  ): Promise<Recipe[]> {
    const query = plainToClass(RecipeFindManyArgs, request.query);
    const results = await this.service.findRecipes(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        ingredient: {
          select: {
            id: true,
          },
        },

        instructions: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipes")
  async connectRecipes(
    @common.Param() params: IngredientWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        connect: body,
      },
    };
    await this.service.updateIngredient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipes")
  async updateRecipes(
    @common.Param() params: IngredientWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        set: body,
      },
    };
    await this.service.updateIngredient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipes")
  async disconnectRecipes(
    @common.Param() params: IngredientWhereUniqueInput,
    @common.Body() body: RecipeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipes: {
        disconnect: body,
      },
    };
    await this.service.updateIngredient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("")
  @swagger.ApiOkResponse({
    type: Ingredient,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetIngredients(
    @common.Body()
    body: IngredientFindManyArgs[]
  ): Promise<Ingredient[]> {
    return this.service.GetIngredients(body);
  }
}
